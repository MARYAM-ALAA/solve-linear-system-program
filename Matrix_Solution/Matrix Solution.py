# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '33.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(745, 490)
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(10, 40, 321, 131))
        self.groupBox.setObjectName("groupBox")
        self.row = QtWidgets.QLineEdit(self.groupBox)
        self.row.setGeometry(QtCore.QRect(10, 60, 113, 22))
        self.row.setObjectName("row")
        self.col = QtWidgets.QLineEdit(self.groupBox)
        self.col.setGeometry(QtCore.QRect(200, 60, 113, 22))
        self.col.setObjectName("col")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(160, 60, 16, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(30, 40, 49, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(230, 40, 49, 16))
        self.label_3.setObjectName("label_3")
        self.groupBox_2 = QtWidgets.QGroupBox(Form)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 240, 321, 191))
        self.groupBox_2.setObjectName("groupBox_2")
        self.mat = QtWidgets.QTextEdit(self.groupBox_2)
        self.mat.setGeometry(QtCore.QRect(50, 40, 221, 131))
        self.mat.setObjectName("mat")
        self.groupBox_3 = QtWidgets.QGroupBox(Form)
        self.groupBox_3.setGeometry(QtCore.QRect(380, 30, 341, 451))
        self.groupBox_3.setObjectName("groupBox_3")
        self.result = QtWidgets.QTextEdit(self.groupBox_3)
        self.result.setGeometry(QtCore.QRect(10, 20, 321, 421))
        self.result.setObjectName("result")
        self.solve = QtWidgets.QPushButton(Form)
        self.solve.setGeometry(QtCore.QRect(90, 440, 151, 31))
        self.solve.setObjectName("solve")
        self.solve.clicked.connect(self.solveclicked)
        

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.groupBox.setTitle(_translate("Form", "Matrix Size"))
        self.label.setText(_translate("Form", "X"))
        self.label_2.setText(_translate("Form", "Row"))
        self.label_3.setText(_translate("Form", "Col(+b)"))
        self.groupBox_2.setTitle(_translate("Form", "Enter The Augmented Matrix Row-Wise"))
        self.groupBox_3.setTitle(_translate("Form", "Result "))
        self.solve.setText(_translate("Form", "Solve"))

    def solveclicked(self): 
        row = int(self.row.text())
        col = int(self.col.text())
        A = np.array(list(map(int,self.mat.toPlainText().split()))).reshape(row,col).astype('float')
        
        self.result.insertPlainText(f"Your Matrix Is :\n{A}\n"+70*"-"+"\n")
        if (col-1)>row:
               self.result.insertPlainText("Matrix Have Infinite Solutions")
        if A[0][0]==0:
            if A[1][0]!=0:
                A[0]=A[1]+A[0]
                self.result.insertPlainText(f"R2+R1\n{A}\n"+70*"-"+"\n")
                
            else:
                A[0]=A[2]+A[0]
                self.result.insertPlainText(f"R3+R1\n{A}"+70*"-"+"\n")
            
        if A.shape == (3,4):
            if A[0][0] != 1:
               self.result.insertPlainText(f"R1/{A[0][0]} \n")
               A[0] = A[0]/A[0][0]
               self.result.insertPlainText(f"{A}\n"+70*"-"+"\n")
    
            if A[1][0] != 0:
               self.result.insertPlainText(f"R2=-({A[1][0]}xR1)+R2 \n")
               A[1] = (A[0]*A[1][0]*-1)+ A[1]
               self.result.insertPlainText(f"{A}\n"+70*"-"+"\n") 

            if A[2][0] != 0:
                self.result.insertPlainText(f"R3=-({A[2][0]}xR1)+R3 \n")
                A[2] = (A[0]*A[2][0]*-1)+ A[2]
                self.result.insertPlainText(f"{A}\n"+70*"-"+"\n") 

            if A[1][1] != 1:
                    self.result.insertPlainText(f"R2/{A[1][1]} \n")
                    A[1] = A[1]/A[1][1]
                    self.result.insertPlainText(f"{A}\n"+70*"-"+"\n") 
                    if A[2][0]==0 and A[2][1]==0 and A[2][2]==0:
                     self.result.insertPlainText("Infinite")
               

            if A[2][1] != 0:
                   self.result.insertPlainText(f"R3=-({A[2][1]}xR1)+R3 \n")
                   A[2] = (A[1]*A[2][1]*-1)+ A[2]
                   self.result.insertPlainText(f"{A}\n"+70*"-"+"\n") 
                          
            if A[2][2] != 1:
                   self.result.insertPlainText(f"R3/{A[2][2]} \n")
                   A[2] = A[2]/A[2][2]
                   self.result.insertPlainText(f"{A}\n"+70*"-"+"\n") 
                   
            if A[0][1] != 0:
                   self.result.insertPlainText(f"R1=-({A[0][1]}xR2)+R1 \n")
                   A[0] = (A[1]*A[0][1]*-1)+A[0]
                   self.result.insertPlainText(f"{A}\n"+70*"-"+"\n") 

            if A[0][2] != 0:
                 self.result.insertPlainText(f"R1=-({A[0][2]}xR2)+R1 \n")
                 A[0] = (A[2]*A[0][2]*-1)+A[0]
                 self.result.insertPlainText(f"{A}\n"+70*"-"+"\n") 

            if A[1][2] != 0:
                    self.result.insertPlainText(f"R2=-({A[1][2]}xR3)+R2 \n")
                    A[1] = (A[2]*A[1][2]*-1)+A[1]
                    self.result.insertPlainText(f"{A}\n"+70*"-"+"\n") 
            if A[2][3]==float('inf') or A[2][3]==float('-inf'):
                 self.result.insertPlainText(f"Matrix Has No Solutions")
            elif A[0][3]!=float:
                 self.result.insertPlainText(f"Matrix Has Infinite Solutions")

            else :     
                self.result.insertPlainText(f"""Your Variables Equals :
x = {A[0][3]}
y = {A[1][3]} 
z = {A[2][3]}
""")
                                                   
        if A.shape == (2,3):
                if A[0][0] != 1:
                    self.result.insertPlainText(f"R1/{A[0][0]} \n")
                    A[0] = A[0]/A[0][0]
                    self.result.insertPlainText(f"{A}\n"+70*"-"+"\n")
              
                if A[1][0] != 0:
                   self.result.insertPlainText(f"R2=-({A[1][0]}xR1)+R2 \n")
                   A[1] = (A[0]*A[1][0]*-1)+ A[1]
                   self.result.insertPlainText(f"{A}\n"+70*"-"+"\n")

                if A[1][1] != 1:
                   self.result.insertPlainText(f"R2/{A[1][1]} \n")
                   A[1] = A[1]/A[1][1]
                   self.result.insertPlainText(f"{A}\n"+70*"-"+"\n")

                if A[0][1] != 0:
                    self.result.insertPlainText(f"R1=-({A[0][1]}xR2)+R1 \n")
                    A[0] = (A[1]*A[0][1]*-1)+A[0]
                    self.result.insertPlainText(f"{A}\n"+70*"-"+"\n")

                if A[1][2]==float('inf') or A[1][2]==float('-inf'):
                 self.result.insertPlainText(f"Matrix Has No Solutions")
                elif A[0][2]!=float:
                 self.result.insertPlainText(f"Matrix Has Infinite Solutions")

                else :     
                   self.result.insertPlainText(f"""Your Variables Equals :
x = {A[0][2]}
y = {A[1][2]}                                                                                             
 """)

        if A.shape == (1,2):
                if A[0][0] != 1:
                    self.result.insertPlainText(f"R1/{A[0][0]} \n")
                    A[0] = A[0]/A[0][0]
                    self.result.insertPlainText(f"{A}\n"+70*"-"+"\n")
        
                self.result.insertPlainText(f"x = {A[0][1]}")







        


        




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
